// Generated by CoffeeScript 1.6.3
(function() {
  var BANK_INSIDE_RADII, LARGE_BASE_WIDTH, SMALL_BASE_WIDTH, TEMPLATE_WIDTH, TURN_INSIDE_RADII, exportObj;

  exportObj = typeof exports !== "undefined" && exports !== null ? exports : this;

  SMALL_BASE_WIDTH = 40;

  LARGE_BASE_WIDTH = 80;

  TEMPLATE_WIDTH = SMALL_BASE_WIDTH / 2;

  BANK_INSIDE_RADII = ['', 75, 122, 173];

  TURN_INSIDE_RADII = ['', 27, 52, 79];

  exportObj.draw = function() {
    var canvas, ctx;
    canvas = document.getElementById('playarea');
    if (canvas.getContext != null) {
      ctx = canvas.getContext('2d');
      ctx.save();
      ctx.translate(40, 40);
      exportObj.drawSmallBase(ctx);
      ctx.restore();
      ctx.save();
      ctx.translate(40 + exportObj.getNubOffset(SMALL_BASE_WIDTH), 40);
      exportObj.drawStraight(ctx, 1);
      ctx.restore();
      ctx.save();
      ctx.translate(100, 200);
      exportObj.drawBank(ctx, 3, 'left');
      ctx.restore();
      ctx.save();
      ctx.translate(200, 100);
      exportObj.drawTurn(ctx, 1, 'right');
      return ctx.restore();
    }
  };

  exportObj.init = function(ctx) {
    return ctx.lineWidth = 1;
  };

  exportObj.drawSmallBase = function(ctx) {
    return exportObj.drawBase(ctx, SMALL_BASE_WIDTH);
  };

  exportObj.drawBase = function(ctx, width) {
    ctx.strokeRect(0, 0, width, width);
    ctx.beginPath();
    ctx.moveTo(1, 0);
    ctx.lineTo(width / 2, width / 2);
    ctx.lineTo(width - 1, 0);
    return ctx.stroke();
  };

  exportObj.getNubOffset = function(base_width) {
    return (base_width - TEMPLATE_WIDTH) / 2;
  };

  exportObj.drawStraight = function(ctx, length) {
    return ctx.strokeRect(0, 0, TEMPLATE_WIDTH, -SMALL_BASE_WIDTH * length);
  };

  exportObj.drawBank = function(ctx, length, direction) {
    var angle, radius;
    radius = BANK_INSIDE_RADII[length];
    ctx.beginPath();
    switch (direction) {
      case 'left':
        angle = -Math.PI / 4.0;
        ctx.arc(-radius, 0, radius, angle, 0);
        ctx.lineTo(TEMPLATE_WIDTH, 0);
        ctx.arc(-radius, 0, radius + TEMPLATE_WIDTH, 0, angle, true);
        break;
      case 'right':
        angle = -3 * Math.PI / 4.0;
        ctx.arc(radius + TEMPLATE_WIDTH, 0, radius, angle, Math.PI, true);
        ctx.lineTo(0, 0);
        ctx.arc(radius + TEMPLATE_WIDTH, 0, radius + TEMPLATE_WIDTH, Math.PI, angle);
        break;
      default:
        throw new Error("Invalid direction " + direction);
    }
    ctx.closePath();
    return ctx.stroke();
  };

  exportObj.drawTurn = function(ctx, length, direction) {
    var angle, radius;
    angle = -Math.PI / 2;
    radius = TURN_INSIDE_RADII[length];
    ctx.beginPath();
    switch (direction) {
      case 'left':
        ctx.arc(-radius, 0, radius, angle, 0);
        ctx.lineTo(TEMPLATE_WIDTH, 0);
        ctx.arc(-radius, 0, radius + TEMPLATE_WIDTH, 0, angle, true);
        break;
      case 'right':
        ctx.arc(radius + TEMPLATE_WIDTH, 0, radius + TEMPLATE_WIDTH, angle, Math.PI, true);
        ctx.lineTo(TEMPLATE_WIDTH, 0);
        ctx.arc(radius + TEMPLATE_WIDTH, 0, radius, Math.PI, angle);
        break;
      default:
        throw new Error("Invalid direction " + direction);
    }
    ctx.closePath();
    return ctx.stroke();
  };

}).call(this);
