// Generated by CoffeeScript 1.6.3
(function() {
  var BANK_INSIDE_RADII, LARGE_BASE_WIDTH, SMALL_BASE_WIDTH, TEMPLATE_WIDTH, TURN_INSIDE_RADII, exportObj;

  exportObj = typeof exports !== "undefined" && exports !== null ? exports : this;

  SMALL_BASE_WIDTH = 40;

  LARGE_BASE_WIDTH = 80;

  TEMPLATE_WIDTH = SMALL_BASE_WIDTH / 2;

  BANK_INSIDE_RADII = ['', 75, 122, 173];

  TURN_INSIDE_RADII = ['', 27, 52, 79];

  exportObj.init = function(ctx) {
    return ctx.lineWidth = 1;
  };

  exportObj.drawSmallBase = function(ctx) {
    return exportObj.drawBase(ctx, SMALL_BASE_WIDTH);
  };

  exportObj.drawLargeBase = function(ctx) {
    return exportObj.drawBase(ctx, LARGE_BASE_WIDTH);
  };

  exportObj.drawBase = function(ctx, width) {
    var nub_offset;
    ctx.strokeRect(0, 0, width, width);
    ctx.beginPath();
    ctx.moveTo(1, 0);
    ctx.lineTo(width / 2, width / 2);
    ctx.lineTo(width - 1, 0);
    ctx.stroke();
    nub_offset = (width - TEMPLATE_WIDTH) / 2;
    ctx.strokeRect(nub_offset - 1, -1, 1, 2);
    ctx.strokeRect(nub_offset - 1, width - 1, 1, 2);
    ctx.strokeRect(nub_offset + TEMPLATE_WIDTH, -1, 1, 2);
    return ctx.strokeRect(nub_offset + TEMPLATE_WIDTH, width - 1, 1, 2);
  };

  exportObj.translateToNubs = function(ctx, size) {
    var offset;
    offset = (function() {
      switch (size) {
        case 'small':
          return SMALL_BASE_WIDTH / 4;
        case 'large':
          return (LARGE_BASE_WIDTH - TEMPLATE_WIDTH) / 2;
        default:
          throw new Error("Invalid size " + size);
      }
    })();
    return ctx.translate(offset, 0);
  };

  exportObj.drawStraight = function(ctx, length) {
    return ctx.strokeRect(0, 0, TEMPLATE_WIDTH, -SMALL_BASE_WIDTH * length);
  };

  exportObj.drawBank = function(ctx, length, direction) {
    var angle, radius;
    radius = BANK_INSIDE_RADII[length];
    ctx.beginPath();
    switch (direction) {
      case 'left':
        angle = -Math.PI / 4.0;
        ctx.arc(-radius, 0, radius, angle, 0);
        ctx.lineTo(TEMPLATE_WIDTH, 0);
        ctx.arc(-radius, 0, radius + TEMPLATE_WIDTH, 0, angle, true);
        break;
      case 'right':
        angle = -3 * Math.PI / 4.0;
        ctx.arc(radius + TEMPLATE_WIDTH, 0, radius, angle, Math.PI, true);
        ctx.lineTo(0, 0);
        ctx.arc(radius + TEMPLATE_WIDTH, 0, radius + TEMPLATE_WIDTH, Math.PI, angle);
        break;
      default:
        throw new Error("Invalid direction " + direction);
    }
    ctx.closePath();
    return ctx.stroke();
  };

  exportObj.drawTurn = function(ctx, length, direction) {
    var angle, radius;
    angle = -Math.PI / 2;
    radius = TURN_INSIDE_RADII[length];
    ctx.beginPath();
    switch (direction) {
      case 'left':
        ctx.arc(-radius, 0, radius, angle, 0);
        ctx.lineTo(TEMPLATE_WIDTH, 0);
        ctx.arc(-radius, 0, radius + TEMPLATE_WIDTH, 0, angle, true);
        break;
      case 'right':
        ctx.arc(radius + TEMPLATE_WIDTH, 0, radius + TEMPLATE_WIDTH, angle, Math.PI, true);
        ctx.lineTo(TEMPLATE_WIDTH, 0);
        ctx.arc(radius + TEMPLATE_WIDTH, 0, radius, Math.PI, angle);
        break;
      default:
        throw new Error("Invalid direction " + direction);
    }
    ctx.closePath();
    return ctx.stroke();
  };

}).call(this);
