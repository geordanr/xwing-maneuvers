// Generated by CoffeeScript 1.6.3
(function() {
  var exportObj;

  exportObj = typeof exports !== "undefined" && exports !== null ? exports : this;

  exportObj.Template = (function() {
    function Template(args) {
      var dir, dist;
      this.type = args.type;
      this.speed = args.speed;
      this.direction = args.direction;
      this.position = args.position;
      this.shape = (function() {
        switch (this.type) {
          case 'straight':
          case 'koiogran':
            return new Kinetic.Rect({
              offsetX: exportObj.TEMPLATE_WIDTH / 2,
              offsetY: 0,
              width: exportObj.TEMPLATE_WIDTH,
              height: -exportObj.SMALL_BASE_WIDTH * this.speed
            });
          case 'bank':
            dir = this.direction;
            dist = this.speed;
            return (function(dir, dist) {
              return new Kinetic.Shape({
                drawFunc: function(ctx) {
                  var angle, radius;
                  radius = exportObj.BANK_INSIDE_RADII[dist];
                  ctx.beginPath();
                  switch (dir) {
                    case 'left':
                      angle = -Math.PI / 4.0;
                      ctx.arc(-radius - (exportObj.TEMPLATE_WIDTH / 2), 0, radius, angle, 0);
                      ctx.lineTo(exportObj.TEMPLATE_WIDTH / 2, 0);
                      ctx.arc(-radius - (exportObj.TEMPLATE_WIDTH / 2), 0, radius + exportObj.TEMPLATE_WIDTH, 0, angle, true);
                      break;
                    case 'right':
                      angle = -3 * Math.PI / 4.0;
                      ctx.arc(radius + (exportObj.TEMPLATE_WIDTH / 2), 0, radius, angle, Math.PI, true);
                      ctx.lineTo(-exportObj.TEMPLATE_WIDTH / 2, 0);
                      ctx.arc(radius + (exportObj.TEMPLATE_WIDTH / 2), 0, radius + exportObj.TEMPLATE_WIDTH, Math.PI, angle);
                      break;
                    default:
                      throw new Error("Invalid direction " + dir);
                  }
                  ctx.closePath();
                  return ctx.strokeShape(this);
                }
              });
            })(dir, dist);
          case 'turn':
            dir = this.direction;
            dist = this.speed;
            return (function(dir, dist) {
              return new Kinetic.Shape({
                drawFunc: function(ctx) {
                  var angle, radius;
                  angle = -Math.PI / 2;
                  radius = exportObj.TURN_INSIDE_RADII[dist];
                  ctx.beginPath();
                  switch (dir) {
                    case 'left':
                      ctx.arc(-radius - (exportObj.TEMPLATE_WIDTH / 2), 0, radius, angle, 0);
                      ctx.lineTo(exportObj.TEMPLATE_WIDTH / 2, 0);
                      ctx.arc(-radius - (exportObj.TEMPLATE_WIDTH / 2), 0, radius + exportObj.TEMPLATE_WIDTH, 0, angle, true);
                      break;
                    case 'right':
                      ctx.arc(radius + (exportObj.TEMPLATE_WIDTH / 2), 0, radius + exportObj.TEMPLATE_WIDTH, angle, Math.PI, true);
                      ctx.lineTo(exportObj.TEMPLATE_WIDTH / 2, 0);
                      ctx.arc(radius + (exportObj.TEMPLATE_WIDTH / 2), 0, radius, Math.PI, angle);
                      break;
                    default:
                      throw new Error("Invalid direction " + dir);
                  }
                  ctx.closePath();
                  return ctx.strokeShape(this);
                }
              });
            })(dir, dist);
        }
      }).call(this);
      this.shape.x(this.position.center_x);
      this.shape.y(this.position.center_y);
      this.shape.rotation(this.position.heading_deg);
    }

    Template.prototype.draw = function(layer, args) {
      var _ref, _ref1;
      layer.add(this.shape);
      this.shape.stroke((_ref = args.stroke) != null ? _ref : 'black');
      this.shape.strokeWidth((_ref1 = args.strokeWidth) != null ? _ref1 : 1);
      return this.shape.draw();
    };

    Template.prototype.deprecated_move = function(shipinst) {
      var d, end_center, new_center, rotation, start_center, x_offset;
      rotation = 0;
      start_center = {
        x: shipinst.group.getOffsetX(),
        y: shipinst.group.getOffsetY()
      };
      end_center = (function() {
        switch (this.type) {
          case 'straight':
            return new Kinetic.Transform().translate(0, -this.speed * exportObj.SMALL_BASE_WIDTH - shipinst.width).point(start_center);
          case 'bank':
            switch (this.direction) {
              case 'left':
                d = exportObj.BANK_INSIDE_RADII[this.speed] - ((shipinst.width - exportObj.TEMPLATE_WIDTH) / 2);
                rotation = -45;
                end_center = new Kinetic.Transform().translate(d, -shipinst.width).point(start_center);
                end_center = new Kinetic.Transform().rotate(-Math.PI / 4).point(end_center);
                return end_center = new Kinetic.Transform().translate(-d, 0).point(end_center);
              case 'right':
                d = exportObj.BANK_INSIDE_RADII[this.speed] + ((shipinst.width + exportObj.TEMPLATE_WIDTH) / 2);
                rotation = 45;
                end_center = new Kinetic.Transform().translate(-d, -shipinst.width).point(start_center);
                end_center = new Kinetic.Transform().rotate(Math.PI / 4).point(end_center);
                return end_center = new Kinetic.Transform().translate(d, 0).point(end_center);
              default:
                throw new Error("Invalid direction " + this.direction);
            }
            break;
          case 'turn':
            switch (this.direction) {
              case 'left':
                d = exportObj.TURN_INSIDE_RADII[this.speed] - ((shipinst.width - exportObj.TEMPLATE_WIDTH) / 2);
                rotation = -90;
                end_center = new Kinetic.Transform().translate(d, -shipinst.width).point(start_center);
                end_center = new Kinetic.Transform().rotate(-Math.PI / 2).point(end_center);
                return end_center = new Kinetic.Transform().translate(-d, 0).point(end_center);
              case 'right':
                d = exportObj.TURN_INSIDE_RADII[this.speed] + ((shipinst.width + exportObj.TEMPLATE_WIDTH) / 2);
                rotation = 90;
                end_center = new Kinetic.Transform().translate(-d, -shipinst.width).point(start_center);
                end_center = new Kinetic.Transform().rotate(Math.PI / 2).point(end_center);
                return end_center = new Kinetic.Transform().translate(d, 0).point(end_center);
              default:
                throw new Error("Invalid direction " + this.direction);
            }
            break;
          case 'koiogran':
            rotation = 180;
            end_center = new Kinetic.Transform().translate(-shipinst.group.getOffsetX(), -shipinst.group.getOffsetY()).point(start_center);
            end_center = new Kinetic.Transform().rotate(Math.PI).point(end_center);
            return end_center = new Kinetic.Transform().translate(shipinst.group.getOffsetX(), -shipinst.group.getOffsetY() - (this.speed * exportObj.SMALL_BASE_WIDTH)).point(end_center);
          case 'barrelroll':
            x_offset = ship.width + (this.speed * exportObj.SMALL_BASE_WIDTH);
            switch (this.direction) {
              case 'left':
                return t.translate(-x_offset, -this.end_speed_from_front + this.start_speed_from_front);
              case 'right':
                return t.translate(x_offset, -this.end_speed_from_front + this.start_speed_from_front);
              case 'leftforward':
                t.translate(-ship.width / 2, this.start_speed_from_front - (ship.width / 2) - exportObj.BANK_INSIDE_RADII[this.speed]);
                t.rotate(Math.PI / 4);
                return t.translate(-ship.width / 2, -this.end_speed_from_front + (ship.width / 2) + exportObj.BANK_INSIDE_RADII[this.speed]);
              case 'leftback':
                t.translate(-ship.width / 2, this.start_speed_from_front - (ship.width / 2) + exportObj.TEMPLATE_WIDTH + exportObj.BANK_INSIDE_RADII[this.speed]);
                t.rotate(-Math.PI / 4);
                return t.translate(-ship.width / 2, -exportObj.BANK_INSIDE_RADII[this.speed] - exportObj.TEMPLATE_WIDTH + (ship.width / 2) - this.end_speed_from_front);
              case 'rightforward':
                t.translate(ship.width / 2, this.start_speed_from_front - (ship.width / 2) - exportObj.BANK_INSIDE_RADII[this.speed]);
                t.rotate(-Math.PI / 4);
                return t.translate(ship.width / 2, -this.end_speed_from_front + (ship.width / 2) + exportObj.BANK_INSIDE_RADII[this.speed]);
              case 'rightback':
                t.translate(ship.width / 2, this.start_speed_from_front - (ship.width / 2) + exportObj.TEMPLATE_WIDTH + exportObj.BANK_INSIDE_RADII[this.speed]);
                t.rotate(Math.PI / 4);
                return t.translate(ship.width / 2, -exportObj.BANK_INSIDE_RADII[this.speed] - exportObj.TEMPLATE_WIDTH + (ship.width / 2) - this.end_speed_from_front);
              default:
                throw new Error("Invalid direction " + this.direction);
            }
            break;
          default:
            throw new Error("Invalid template type " + this.type);
        }
      }).call(this);
      if (this.type === 'koiogran') {
        rotation = 180;
      }
      new_center = shipinst.group.getTransform().point(end_center);
      return new ShipInstance({
        ship: shipinst.ship,
        x: new_center.x,
        y: new_center.y,
        heading_deg: shipinst.group.getRotation() + rotation
      });
    };

    return Template;

  })();

}).call(this);

/*
//@ sourceMappingURL=template.map
*/
