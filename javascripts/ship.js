// Generated by CoffeeScript 1.6.3
(function() {
  var Turn, exportObj;

  exportObj = typeof exports !== "undefined" && exports !== null ? exports : this;

  exportObj.Ship = (function() {
    function Ship(args) {
      this.stage = args.stage;
      this.name = args.name;
      this.size = args.size;
      this.start_position = new exportObj.Position({
        center_x: args.x,
        center_y: args.y,
        heading_deg: args.heading_deg
      });
      this.turns = [
        new Turn({
          ship: this,
          start_position: this.start_position
        })
      ];
      this.layer = new Kinetic.Layer();
      this.stage.add(this.layer);
    }

    Ship.prototype.addTurn = function(args) {
      return this.turns.push(new Turn({
        ship: this,
        start_position: this.turns[this.turns.length - 1].base_at_start.position,
        before: args.before,
        during: args.during,
        after: args.after
      }));
    };

    Ship.prototype.drawTurns = function(args) {
      var turn, _i, _len, _ref, _results;
      _ref = this.turns;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        turn = _ref[_i];
        _results.push(turn.draw(this.layer, args));
      }
      return _results;
    };

    return Ship;

  })();

  Turn = (function() {
    function Turn(args) {
      this.ship = args.ship;
      this.base_at_start = new exportObj.Base({
        size: this.ship.size,
        position: args.start_position
      });
      this.before = args.before;
      this.during = args.during;
      this.after = args.after;
    }

    Turn.prototype.draw = function(layer, args) {
      var cur_base, movement, new_base, template, _i, _len, _ref, _results;
      if (args == null) {
        args = {};
      }
      cur_base = this.base_at_start;
      _ref = [this.before, this.during, this.after];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        movement = _ref[_i];
        if (movement != null) {
          template = movement.getTemplateForBase(cur_base);
          template.draw(layer, args);
          new_base = cur_base.newBaseFromMovement(movement);
          new_base.draw(layer, args);
          _results.push(cur_base = new_base);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Turn;

  })();

}).call(this);

/*
//@ sourceMappingURL=ship.map
*/
