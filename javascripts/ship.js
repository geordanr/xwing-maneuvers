// Generated by CoffeeScript 1.6.3
(function() {
  var exportObj;

  exportObj = typeof exports !== "undefined" && exports !== null ? exports : this;

  exportObj.NORTH = 0;

  exportObj.EAST = Math.PI / 2;

  exportObj.SOUTH = Math.PI;

  exportObj.WEST = -Math.PI / 2;

  exportObj.Template = (function() {
    function Template(args) {
      this.type = args.type;
      this.distance = args.distance;
      this.direction = args.direction;
    }

    return Template;

  })();

  exportObj.STRAIGHT1 = new exportObj.Template({
    type: 'straight',
    distance: 1
  });

  exportObj.STRAIGHT2 = new exportObj.Template({
    type: 'straight',
    distance: 2
  });

  exportObj.STRAIGHT3 = new exportObj.Template({
    type: 'straight',
    distance: 3
  });

  exportObj.STRAIGHT4 = new exportObj.Template({
    type: 'straight',
    distance: 4
  });

  exportObj.BANKLEFT1 = new exportObj.Template({
    type: 'bank',
    direction: 'left',
    distance: 1
  });

  exportObj.BANKLEFT2 = new exportObj.Template({
    type: 'bank',
    direction: 'left',
    distance: 2
  });

  exportObj.BANKLEFT3 = new exportObj.Template({
    type: 'bank',
    direction: 'left',
    distance: 3
  });

  exportObj.BANKRIGHT1 = new exportObj.Template({
    type: 'bank',
    direction: 'right',
    distance: 1
  });

  exportObj.BANKRIGHT2 = new exportObj.Template({
    type: 'bank',
    direction: 'right',
    distance: 2
  });

  exportObj.BANKRIGHT3 = new exportObj.Template({
    type: 'bank',
    direction: 'right',
    distance: 3
  });

  exportObj.TURNLEFT1 = new exportObj.Template({
    type: 'turn',
    direction: 'left',
    distance: 1
  });

  exportObj.TURNLEFT2 = new exportObj.Template({
    type: 'turn',
    direction: 'left',
    distance: 2
  });

  exportObj.TURNLEFT3 = new exportObj.Template({
    type: 'turn',
    direction: 'left',
    distance: 3
  });

  exportObj.TURNRIGHT1 = new exportObj.Template({
    type: 'turn',
    direction: 'right',
    distance: 1
  });

  exportObj.TURNRIGHT2 = new exportObj.Template({
    type: 'turn',
    direction: 'right',
    distance: 2
  });

  exportObj.TURNRIGHT3 = new exportObj.Template({
    type: 'turn',
    direction: 'right',
    distance: 3
  });

  exportObj.Ship = (function() {
    function Ship(args) {
      var _ref, _ref1, _ref2;
      this.name = args.name;
      this.size = args.size;
      this.ctx = args.ctx;
      this.center_x = (_ref = args.center_x) != null ? _ref : 0;
      this.center_y = (_ref1 = args.center_y) != null ? _ref1 : 0;
      this.heading_radians = (_ref2 = args.heading_radians) != null ? _ref2 : exportObj.NORTH;
    }

    Ship.prototype.draw = function() {
      var e;
      this.ctx.save();
      exportObj.transformToCenterAndHeading(this.ctx, this.center_x, this.center_y, this.heading_radians);
      try {
        switch (this.size) {
          case 'small':
            return exportObj.drawSmallBase(this.ctx);
          case 'large':
            return exportObj.drawLargeBase(this.ctx);
          default:
            throw new Error("Invalid size " + this.size);
        }
      } catch (_error) {
        e = _error;
        throw e;
      } finally {
        this.ctx.restore();
      }
    };

    Ship.prototype.placeTemplate = function(template) {
      var e;
      this.ctx.save();
      try {
        exportObj.transformToCenterAndHeading(this.ctx, this.center_x, this.center_y, this.heading_radians);
        exportObj.translateToNubsFromCenter(this.ctx, this.size);
        switch (template.type) {
          case 'straight':
          case 'koiogran':
            return exportObj.drawStraight(this.ctx, template.distance);
          case 'bank':
            return exportObj.drawBank(this.ctx, template.distance, template.direction);
          case 'turn':
            return exportObj.drawTurn(this.ctx, template.distance, template.direction);
          default:
            throw new Error("Invalid template type " + template.type);
        }
      } catch (_error) {
        e = _error;
        throw e;
      } finally {
        this.ctx.restore();
      }
    };

    Ship.prototype.move = function(template) {};

    return Ship;

  })();

}).call(this);
